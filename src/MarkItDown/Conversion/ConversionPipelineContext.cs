using System;
using System.Collections.Generic;
using MarkItDown.Intelligence;
using Microsoft.Extensions.Logging;

namespace MarkItDown;

/// <summary>
/// Provides context data for conversion middleware.
/// </summary>
public sealed class ConversionPipelineContext
{
    internal ConversionPipelineContext(StreamInfo streamInfo, ConversionArtifacts artifacts, IList<DocumentSegment> segments, IAiModelProvider aiModels, ILogger? logger)
    {
        StreamInfo = streamInfo ?? throw new ArgumentNullException(nameof(streamInfo));
        Artifacts = artifacts ?? throw new ArgumentNullException(nameof(artifacts));
        Segments = segments ?? throw new ArgumentNullException(nameof(segments));
        AiModels = aiModels ?? NullAiModelProvider.Instance;
        Logger = logger;
    }

    /// <summary>
    /// Gets metadata that describes the converted stream.
    /// </summary>
    public StreamInfo StreamInfo { get; }

    /// <summary>
    /// Gets the raw artifacts extracted by the converter.
    /// </summary>
    public ConversionArtifacts Artifacts { get; }

    /// <summary>
    /// Gets the mutable list of segments generated by the converter.
    /// </summary>
    public IList<DocumentSegment> Segments { get; }

    /// <summary>
    /// Gets access to configured AI model providers.
    /// </summary>
    public IAiModelProvider AiModels { get; }

    /// <summary>
    /// Gets the logger supplied by the conversion host.
    /// </summary>
    public ILogger? Logger { get; }
}
